<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LouYaolong&#39;s Blog</title>
  
  <subtitle>BUG ? FUCK : HAPPY</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://louyaolong.github.io/"/>
  <updated>2019-05-17T06:42:58.810Z</updated>
  <id>https://louyaolong.github.io/</id>
  
  <author>
    <name>LouYaolong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>小程序之navigateBack</title>
    <link href="https://louyaolong.github.io/post/2045f9c7.html"/>
    <id>https://louyaolong.github.io/post/2045f9c7.html</id>
    <published>2019-05-16T06:19:25.000Z</published>
    <updated>2019-05-17T06:42:58.810Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>如何通过navigateBack管理页面栈？</p><p>指哪打哪才是navigateBack正确使用姿势</p></blockquote><a id="more"></a><h2 id="navigateBack的用法"><a href="#navigateBack的用法" class="headerlink" title="navigateBack的用法"></a>navigateBack的用法</h2><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.navigateBack({</span><br><span class="line">     delta: backSize <span class="comment">// backsize表示关闭几页，从页面栈中移除几个(包含本页面)</span></span><br><span class="line">   })</span><br></pre></td></tr></tbody></table></figure><h2 id="项目中的需求"><a href="#项目中的需求" class="headerlink" title="项目中的需求"></a>项目中的需求</h2><div class="note primary no-icon"><p>「 <strong>需求 </strong>」：做一个公共结果页，从其他地方跳转到这个页面，最后点击「完成按钮或者右上角返回」后，回到想回到的页面，并且控制目标页面刷新还是不刷新。</p><p>「 <strong>分析</strong> 」：想实现回到想回到的页面，通过对页面栈的管理来实现。</p><p>「 <strong>举例</strong> 」：页面栈中有1-2-3-4-5，5是公用页面，现在想跳到1，那么就可以通过navigateBack的delta值等于4来控制回到1，我们就动态改变delta的值实现动态跳转，navigateBack会让页面出栈，这样就很好地维护了页面栈。</p></div><h2 id="具体思路"><a href="#具体思路" class="headerlink" title="具体思路"></a>具体思路</h2><div class="note info no-icon"><p>通过getCurrentPages( )能够拿到当前小程序页面栈的数组，数组中有个key为route，该值即是栈里页面地址。要跳转到1，4传值给5，5中通过遍历页面栈数组，判断传过来的值是否等于页面栈中的route值，相等的话，记录index，这样即可完成。</p></div><h2 id="代码说话"><a href="#代码说话" class="headerlink" title="代码说话"></a>代码说话</h2><div class="note success no-icon"><p>这是项目中用到的公用页面，就是通过navigateBack来控制跳转</p><p>注释写得很清楚了</p><p>想要更清晰地了解页面栈是怎样的，就打断点看一看</p><p>有问题欢迎留言讨论<span class="github-emoji" style="color: transparent;background:no-repeat url(https://assets-cdn.github.com/images/icons/emoji/unicode/1f604.png?v8) center/contain" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f604.png?v8">😄</span></p></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">Page({</span><br><span class="line">  data: {</span><br><span class="line">    isInvoke: <span class="literal">false</span>,<span class="comment">// 是否调用过按钮</span></span><br><span class="line">    isUnload: <span class="literal">true</span>,<span class="comment">// 是否是卸载的生命周期</span></span><br><span class="line">    resultImg: <span class="string">""</span>, <span class="comment">// 图标(页面内使用)</span></span><br><span class="line">    result: {</span><br><span class="line">      title: <span class="string">""</span>,<span class="comment">// 必传(页面标题)</span></span><br><span class="line">      type: <span class="number">1</span>,<span class="comment">// 必传(0:失败 1:成功)</span></span><br><span class="line">      url: <span class="string">""</span>, <span class="comment">// 必传(跳转的url),传空或者不在页面栈中，跳转到首页或指定页面</span></span><br><span class="line">      <span class="comment">// 选传(上面文案布局，成功默认是:成功,失败默认:失败)</span></span><br><span class="line">      resultUp: <span class="string">""</span>,</span><br><span class="line">      <span class="comment">// 选传(下面文案布局，不传默认是空</span></span><br><span class="line">      resultDown: <span class="string">""</span>,</span><br><span class="line">      <span class="comment">// 选传(按钮名称,成功默认:完成,失败默认:重试)</span></span><br><span class="line">      btnName: <span class="string">""</span>,</span><br><span class="line">      <span class="comment">// 选传(是否刷新目标页，默认刷新)</span></span><br><span class="line">      isRefresh: <span class="literal">true</span>,</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="comment">/** 页面初始化 */</span></span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>{</span><br><span class="line">  },</span><br><span class="line">  onShow: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">this</span>.initData();</span><br><span class="line">  },</span><br><span class="line">  <span class="comment">/** 页面卸载*/</span></span><br><span class="line">  onUnload: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="comment">// 如果点击了按钮，就不再调用它</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.data.isInvoke) {</span><br><span class="line">      <span class="keyword">this</span>.data.isUnload = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">this</span>.targetJump()</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="comment">/** 初始化值 */</span></span><br><span class="line">  initData: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> result = wx.getStorageSync(<span class="string">"result"</span>)</span><br><span class="line">    <span class="keyword">if</span> (result) {</span><br><span class="line">      <span class="comment">// 页面标题</span></span><br><span class="line">      wx.setNavigationBarTitle({</span><br><span class="line">        title: result.title</span><br><span class="line">      })</span><br><span class="line">      <span class="keyword">var</span> type = result.type</span><br><span class="line">      <span class="keyword">this</span>.data.result.url = result.url</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> (result.isRefresh) != <span class="string">"undefined"</span>) {</span><br><span class="line">        <span class="keyword">this</span>.data.result.isRefresh = result.isRefresh</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">if</span> (type) { <span class="comment">// 成功</span></span><br><span class="line">        result.btnName = result.btnName ? result.btnName : <span class="string">"完成"</span></span><br><span class="line">        <span class="keyword">this</span>.data.resultImg = <span class="string">"/resources/success.png"</span></span><br><span class="line">        result.resultUp = result.resultUp ? result.resultUp : <span class="string">"成功"</span></span><br><span class="line">      } <span class="keyword">else</span> {<span class="comment">// 失败</span></span><br><span class="line">        result.btnName = result.btnName ? result.btnName : <span class="string">"重试"</span></span><br><span class="line">        <span class="keyword">this</span>.data.resultImg = <span class="string">"/resources/failed.png"</span></span><br><span class="line">        result.resultUp = result.resultUp ? result.resultUp : <span class="string">"失败"</span></span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">var</span> btnName = <span class="string">"result.btnName"</span></span><br><span class="line">      <span class="keyword">var</span> resultUp = <span class="string">"result.resultUp"</span></span><br><span class="line">      <span class="keyword">var</span> resultDown = <span class="string">"result.resultDown"</span></span><br><span class="line">      <span class="keyword">this</span>.setData({</span><br><span class="line">        resultImg: <span class="keyword">this</span>.data.resultImg,</span><br><span class="line">        [resultUp]: result.resultUp,</span><br><span class="line">        [resultDown]: result.resultDown ? result.resultDown : <span class="string">""</span>,</span><br><span class="line">        [btnName]: result.btnName</span><br><span class="line">      })</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="comment">/** 按钮点击事件 */</span></span><br><span class="line">  btnClick: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">this</span>.data.isInvoke = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">this</span>.data.isUnload = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">this</span>.targetJump();</span><br><span class="line">  },</span><br><span class="line">  <span class="comment">/** 目标页面跳转 */</span></span><br><span class="line">  targetJump: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="comment">// 清除缓存</span></span><br><span class="line">    wx.removeStorageSync(<span class="string">"result"</span>)</span><br><span class="line">    <span class="keyword">var</span> pages = getCurrentPages()</span><br><span class="line">    <span class="comment">// 如果url为空或者不在页面栈中，返回首页</span></span><br><span class="line">    <span class="keyword">var</span> backSize = <span class="number">100</span></span><br><span class="line">    <span class="keyword">var</span> target</span><br><span class="line">    <span class="built_in">console</span>.log(pages)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>；i &lt; pages.length；i++) {</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.data.result.url.substring(<span class="number">1</span>) == pages[i].route) {</span><br><span class="line">        <span class="comment">// 自身也在栈中，所以要-1</span></span><br><span class="line">        backSize = pages.length - i - <span class="number">1</span>;</span><br><span class="line">        target = pages[i]</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"target"</span>, target)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"backSize"</span>, backSize)</span><br><span class="line">    <span class="keyword">if</span> (backSize == <span class="number">100</span>) {<span class="comment">// 首页或者指定页面</span></span><br><span class="line">      wx.reLaunch({</span><br><span class="line">        url: <span class="keyword">this</span>.data.result.url,</span><br><span class="line">      })</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.data.result.isRefresh) {</span><br><span class="line">      <span class="comment">// 刷新目标页面</span></span><br><span class="line">      target.onLoad()</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.data.isUnload) {<span class="comment">// 用户点击了返回键</span></span><br><span class="line">      <span class="comment">// 如果目标页面在页面栈中倒数第二个位置，返回</span></span><br><span class="line">      <span class="keyword">if</span> (backSize == <span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      }</span><br><span class="line">      <span class="comment">// 如果只是调用了小程序返回键，因为back键默认会关掉一页</span></span><br><span class="line">      backSize = backSize - <span class="number">1</span></span><br><span class="line">    }</span><br><span class="line">    wx.navigateBack({</span><br><span class="line">      delta: backSize</span><br><span class="line">    })</span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><strong>以上</strong></p><hr><!-- rebuild by neat --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;如何通过navigateBack管理页面栈？&lt;/p&gt;&lt;p&gt;指哪打哪才是navigateBack正确使用姿势&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="小程序" scheme="https://louyaolong.github.io/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="小程序" scheme="https://louyaolong.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="navigateBack" scheme="https://louyaolong.github.io/tags/navigateBack/"/>
    
      <category term="页面栈" scheme="https://louyaolong.github.io/tags/%E9%A1%B5%E9%9D%A2%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>如何高效记笔记</title>
    <link href="https://louyaolong.github.io/post/9431294a.html"/>
    <id>https://louyaolong.github.io/post/9431294a.html</id>
    <published>2019-05-13T03:03:10.000Z</published>
    <updated>2019-05-17T06:41:06.993Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>为何记笔记？</p><p>你记的笔记真的有用吗？</p></blockquote><a id="more"></a><h2 id="笔记的种类"><a href="#笔记的种类" class="headerlink" title="笔记的种类"></a>笔记的种类</h2><ul><li><h3 id="查阅类"><a href="#查阅类" class="headerlink" title="查阅类"></a>查阅类</h3><div class="note info"><p>作用：信息记录</p></div></li><li><h3 id="复习类"><a href="#复习类" class="headerlink" title="复习类"></a>复习类</h3><div class="note info"><p>作用：学习资料</p></div></li></ul><h2 id="笔记目的"><a href="#笔记目的" class="headerlink" title="笔记目的"></a>笔记目的</h2><p><strong>根据笔记种类目的分为两种</strong></p><ol><li><h3 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h3><div class="note info"><p>不需要思考，只需查到即可</p></div></li><li><h3 id="复习记录的资料"><a href="#复习记录的资料" class="headerlink" title="复习记录的资料"></a>复习记录的资料</h3><div class="note info"><p>需要思考，明确复习这篇笔记的目的，带着问题再去复习，而不是打开笔记即是内容<br>这样的复习效率是很低的，而且也不利于记忆</p></div></li></ol><h2 id="笔记记录思路、软件"><a href="#笔记记录思路、软件" class="headerlink" title="笔记记录思路、软件"></a>笔记记录思路、软件</h2><ul><li><h3 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h3><div class="note success no-icon"><p>实现：思维导图「 用来链接思路和具体」<br>软件：<a href="https://www.processon.com/mindmap/5cd4597ae4b09b16ffd993cb" target="_blank" rel="noopener">processOn</a></p></div></li><li><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><div class="note success no-icon"><p>实现：逻辑图、时序图、甬道图「 用来梳理逻辑 」<br>软件：<a href="https://www.processon.com/mindmap/5cd4597ae4b09b16ffd993cb" target="_blank" rel="noopener">processOn</a></p></div></li><li><h3 id="具体"><a href="#具体" class="headerlink" title="具体"></a>具体</h3><div class="note danger no-icon"><p>实现：md文本笔记<br>作用：</p><blockquote><ol><li>记录具体的细节</li><li>笔记开头应有这篇笔记的目录，这样做有两个好处：<ul><li>查阅类笔记可让查阅者直接跳转至所需信息处</li><li>复习类笔记可让复习者了解这篇笔记的大纲，<strong>可先思考后再查看细节</strong></li></ul></li></ol></blockquote><p>软件：typor</p></div></li></ul><p><strong>以上</strong></p><!-- rebuild by neat --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;为何记笔记？&lt;/p&gt;&lt;p&gt;你记的笔记真的有用吗？&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="效率学习" scheme="https://louyaolong.github.io/categories/%E6%95%88%E7%8E%87%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="高效" scheme="https://louyaolong.github.io/tags/%E9%AB%98%E6%95%88/"/>
    
      <category term="note" scheme="https://louyaolong.github.io/tags/note/"/>
    
      <category term="记笔记" scheme="https://louyaolong.github.io/tags/%E8%AE%B0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
